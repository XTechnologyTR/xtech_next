{"ast":null,"code":"import _regeneratorRuntime from \"/Users/xtechnology/ss/xtech_next/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/xtechnology/ss/xtech_next/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/xtechnology/ss/xtech_next/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/xtechnology/ss/xtech_next/src/components/subscribe.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/** @jsx jsx */\nimport { useRef, useState } from 'react';\nimport { jsx } from 'theme-ui';\nimport { Flex, Button, Input } from 'theme-ui';\nexport default function Subscribe() {\n  _s();\n\n  // 1. Create a reference to the input so we can fetch/clear it's value.\n  var inputEl = useRef(null); // 2. Hold a status in state to handle the response from our API.\n\n  var _useState = useState({\n    submitted: false,\n    submitting: false,\n    info: {\n      error: false,\n      msg: null\n    }\n  }),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  var handleMailChimpResponse = function handleMailChimpResponse(errorMsg, successMsg) {\n    if (errorMsg) {\n      // 4. If there was an error, update the message in state.\n      setStatus({\n        info: {\n          error: true,\n          msg: errorMsg\n        }\n      });\n      return;\n    } // 5. Clear the input value and show a success message.\n\n\n    setStatus({\n      submitted: true,\n      submitting: false,\n      info: {\n        error: false,\n        msg: successMsg\n      }\n    });\n    inputEl.current.value = '';\n  };\n\n  var handleSendGridResponse = function handleSendGridResponse(status, msg) {\n    if (status === 200) {\n      // 5. Clear the input value and show a success message.\n      setStatus({\n        submitted: true,\n        submitting: false,\n        info: {\n          error: false,\n          msg: msg\n        }\n      });\n      inputEl.current.value = '';\n    } else {\n      setStatus({\n        info: {\n          error: true,\n          msg: msg\n        }\n      });\n    }\n  };\n\n  var subscribe = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var res, _yield$res$json, error, text;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              setStatus(function (prevStatus) {\n                return _objectSpread(_objectSpread({}, prevStatus), {}, {\n                  submitting: true\n                });\n              }); // 3. Send a request to our API with the user's email address.\n\n              _context.next = 4;\n              return fetch('/', {\n                body: JSON.stringify({\n                  email: inputEl.current.value\n                }),\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                method: 'POST'\n              });\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.json();\n\n            case 7:\n              _yield$res$json = _context.sent;\n              error = _yield$res$json.error;\n              handleMailChimpResponse(error, 'BaÅŸarÄ±lÄ±!ðŸŽ‰  Åžimdi Mail Adresinize DetaylÄ± Bilgilendirme GÃ¶nderildi.'); // For sendGrid integration\n\n              _context.next = 12;\n              return res.text();\n\n            case 12:\n              text = _context.sent;\n              handleSendGridResponse(res.status, text);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function subscribe(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return jsx(\"div\", {\n    className: \"subscribe__area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, jsx(\"form\", {\n    onSubmit: subscribe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, jsx(Flex, {\n    sx: styles.subscribeForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, jsx(\"label\", {\n    htmlFor: \"email\",\n    sx: {\n      variant: 'styles.srOnly'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"Email Address\"), jsx(Input, {\n    ref: inputEl,\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Mail Adresinizi Giriniz.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, status.info.error && jsx(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, \"Error: \", status.info.msg), !status.info.error && status.info.msg && jsx(\"div\", {\n    className: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, status.info.msg)), jsx(Button, {\n    type: \"submit\",\n    disabled: status.submitting,\n    variant: \"subscribeButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, !status.submitting ? !status.submitted ? 'Abone ol' : 'GÃ¶nder' : 'GÃ¶nderiliyor...'))));\n}\n\n_s(Subscribe, \"eFuzXYZPrAkrFH+a0Cj58Z9NTlM=\");\n\n_c = Subscribe;\nvar styles = {\n  subscribeForm: {\n    width: '100%',\n    mx: 'auto',\n    '[type=\"email\"]': {\n      border: '1px solid #D4DAE2',\n      borderRadius: '7px',\n      fontFamily: 'body',\n      fontSize: [1, 2, 3],\n      fontWeight: 'body',\n      color: 'heading',\n      py: 1,\n      px: [3, 5],\n      backgroundColor: 'transparent',\n      transition: 'all 0.25s',\n      height: ['50px', '60px'],\n      '&:focus': {\n        boxShadow: '0 0 0 0px',\n        borderColor: 'primary'\n      },\n      '::placeholder': {\n        color: '#9A9CB2',\n        opacity: 1\n      }\n    }\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Subscribe\");","map":{"version":3,"sources":["/Users/xtechnology/ss/xtech_next/src/components/subscribe.js"],"names":["useRef","useState","jsx","Flex","Button","Input","Subscribe","inputEl","submitted","submitting","info","error","msg","status","setStatus","handleMailChimpResponse","errorMsg","successMsg","current","value","handleSendGridResponse","subscribe","e","preventDefault","prevStatus","fetch","body","JSON","stringify","email","headers","method","res","json","text","styles","subscribeForm","variant","width","mx","border","borderRadius","fontFamily","fontSize","fontWeight","color","py","px","backgroundColor","transition","height","boxShadow","borderColor","opacity"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { useRef, useState } from 'react';\nimport { jsx } from 'theme-ui';\nimport { Flex, Button, Input } from 'theme-ui';\n\nexport default function Subscribe() {\n  // 1. Create a reference to the input so we can fetch/clear it's value.\n  const inputEl = useRef(null);\n  // 2. Hold a status in state to handle the response from our API.\n  const [status, setStatus] = useState({\n    submitted: false,\n    submitting: false,\n    info: { error: false, msg: null },\n  });\n  const handleMailChimpResponse = (errorMsg, successMsg) => {\n    if (errorMsg) {\n      // 4. If there was an error, update the message in state.\n      setStatus({\n        info: { error: true, msg: errorMsg },\n      });\n\n      return;\n    }\n\n    // 5. Clear the input value and show a success message.\n    setStatus({\n      submitted: true,\n      submitting: false,\n      info: { error: false, msg: successMsg },\n    });\n    inputEl.current.value = '';\n  };\n\n  const handleSendGridResponse = (status, msg) => {\n    if (status === 200) {\n      // 5. Clear the input value and show a success message.\n      setStatus({\n        submitted: true,\n        submitting: false,\n        info: { error: false, msg: msg },\n      });\n      inputEl.current.value = '';\n    } else {\n      setStatus({\n        info: { error: true, msg: msg },\n      });\n    }\n  };\n  const subscribe = async (e) => {\n    e.preventDefault();\n    setStatus((prevStatus) => ({ ...prevStatus, submitting: true }));\n\n    // 3. Send a request to our API with the user's email address.\n    const res = await fetch('/', {\n      body: JSON.stringify({\n        email: inputEl.current.value,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n    });\n    //for mailChimp integration\n    const { error } = await res.json();\n    handleMailChimpResponse(\n      error,\n      'BaÅŸarÄ±lÄ±!ðŸŽ‰  Åžimdi Mail Adresinize DetaylÄ± Bilgilendirme GÃ¶nderildi.'\n    );\n    // For sendGrid integration\n    const text = await res.text();\n    handleSendGridResponse(res.status, text);\n  };\n  return (\n    <div className=\"subscribe__area\">\n      <form onSubmit={subscribe}>\n        <Flex sx={styles.subscribeForm}>\n          <label htmlFor=\"email\" sx={{ variant: 'styles.srOnly' }}>\n            Email Address\n          </label>\n          <Input\n            ref={inputEl}\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"Mail Adresinizi Giriniz.\"\n          />\n\n          <div>\n            {status.info.error && (\n              <div className=\"error\">Error: {status.info.msg}</div>\n            )}\n            {!status.info.error && status.info.msg && (\n              <div className=\"success\">{status.info.msg}</div>\n            )}\n          </div>\n          <Button\n            type=\"submit\"\n            disabled={status.submitting}\n            variant=\"subscribeButton\"\n          >\n            {!status.submitting\n              ? !status.submitted\n                ? 'Abone ol'\n                : 'GÃ¶nder'\n              : 'GÃ¶nderiliyor...'}\n          </Button>\n        </Flex>\n      </form>\n    </div>\n  );\n}\n\nconst styles = {\n  subscribeForm: {\n    width: '100%',\n    mx: 'auto',\n    '[type=\"email\"]': {\n      border: '1px solid #D4DAE2',\n      borderRadius: '7px',\n      fontFamily: 'body',\n      fontSize: [1, 2, 3],\n      fontWeight: 'body',\n      color: 'heading',\n      py: 1,\n      px: [3, 5],\n      backgroundColor: 'transparent',\n      transition: 'all 0.25s',\n      height: ['50px', '60px'],\n      '&:focus': {\n        boxShadow: '0 0 0 0px',\n        borderColor: 'primary',\n      },\n      '::placeholder': {\n        color: '#9A9CB2',\n        opacity: 1,\n      },\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}